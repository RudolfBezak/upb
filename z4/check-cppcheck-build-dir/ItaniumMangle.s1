isLocalContainerContext
getStructor call:[getPrimaryTemplate,getTemplatedDecl] noreturn:[getTemplatedDecl]
getStructor call:[getStructor,return] noreturn:[return]
isLambda call:[isLambda] noreturn:[isLambda]
ItaniumMangleContextImpl
shouldMangleStringLiteral
needsUniqueInternalLinkageNames
getNextDiscriminator call:[empty,getASTContext,getEffectiveDeclContext,getIdentifier,getManglingNumber,getName,getTypedefNameForAnonDecl,isAux,isExternallyVisible,isLambda,make_pair]
getLambdaString call:[Name,assert,getAnonymousStructIdForDebugInfo,getDeclContext,getFunctionScopeIndex,getLambdaContextDecl,getLambdaManglingNumber,getNumParams,isLambda,utostr] noreturn:[getAnonymousStructIdForDebugInfo]
getDiscriminatorOverride
getEffectiveParentContext call:[getEffectiveDeclContext] noreturn:[getEffectiveDeclContext]
getDepth
isInResultType
push
enterResultType
leaveResultType
pop call:[assert,getDepth]
AbiTagState
AbiTagState call:[pop] noreturn:[pop]
write call:[assert,begin,end,erase,getCanonicalDecl,insert,sort,tags,unique,writeSortedUniqueAbiTags] noreturn:[insert,writeSortedUniqueAbiTags]
getUsedAbiTags
setUsedAbiTags
getEmittedAbiTags
getSortedUniqueUsedAbiTags call:[begin,end,erase,sort,unique]
pop call:[assert,begin,end,insert] noreturn:[insert]
writeSortedUniqueAbiTags call:[push_back,size]
getASTContext call:[getASTContext] noreturn:[getASTContext]
isCompatibleWith call:[getASTContext,getClangABICompat,getLangOpts]
CXXNameMangler call:[assert] noreturn:[assert]
CXXNameMangler
CXXNameMangler
CXXNameMangler
CXXNameMangler
CXXNameMangler
CXXNameMangler
getStream
disableDerivedAbiTags
addSubstitution call:[addSubstitution,getCanonicalDecl] noreturn:[addSubstitution]
addSubstitution call:[addSubstitution,getASTContext,getCanonicalNestedNameSpecifier] noreturn:[addSubstitution]
mangleUnqualifiedName call:[getDecl,getDeclName,mangleUnqualifiedName] noreturn:[mangleUnqualifiedName]
getStdNamespace call:[Create,SourceLocation,get,getASTContext,getTranslationUnitDecl,setImplicit] noreturn:[setImplicit]
getEffectiveDeclContext call:[getASTContext,getAsFunction,getBlockManglingContextDecl,getClangABICompat,getDeclContext,getEffectiveDeclContext,getLambdaContextDecl,getLangOpts,getLexicalDeclContext,getRedeclContext,getStdNamespace,getTargetInfo,getTranslationUnitDecl,getTriple,getVaListTagDecl,isAArch64,isARM,isExternC,isLambda,isMemberLikeConstrainedFriend,isThumb] noreturn:[getDeclContext,getEffectiveDeclContext,getRedeclContext,getStdNamespace,getTranslationUnitDecl]
isInternalLinkageDecl call:[getEffectiveDeclContext,getFormalLinkage,isExternallyVisible,isFileContext,isInAnonymousNamespace]
isUniqueInternalLinkageDecl call:[getType,isInternalLinkageDecl]
shouldMangleCXXName call:[getASTContext,getDeclName,getEffectiveDeclContext,getEffectiveParentContext,getFormalLinkage,getLangOpts,getLanguageLinkage,getOwningModuleForLinkage,hasLinkage,isExternC,isFileContext,isFunctionOrMethod,isIdentifier,isMSVCRTEntryPoint,isMain,isTranslationUnit,shouldHaveAbiTags] noreturn:[getEffectiveParentContext]
mangle call:[getAnonField,getDecl,llvm_unreachable,mangleFunctionEncoding,mangleName] noreturn:[llvm_unreachable,mangleFunctionEncoding,mangleName]
mangleFunctionEncoding call:[AdditionalAbiTags,FunctionEncodingMangler,FunctionEncodingStream,begin,disableDerivedAbiTags,empty,end,erase,extendSubstitutions,getDecl,getSortedUniqueUsedAbiTags,makeFunctionReturnTypeTags,mangleFunctionEncodingBareType,mangleName,mangleNameWithAbiTags,pop,push,set_difference,shouldMangleDeclName,size,str,substr] noreturn:[extendSubstitutions]
mangleFunctionEncodingBareType call:[begin,end,getAttrs,getCond,getConstructor,getInheritedConstructor,getPrimaryTemplate,getTemplatedDecl,getType,isCompatibleWith,mangleBareFunctionType,mangleExpression,mangleTemplateArgExpr,pop,push] noreturn:[getConstructor,getTemplatedDecl,mangleBareFunctionType,mangleTemplateArgExpr,pop]
isStd call:[getEffectiveParentContext,getFirstDecl,getIdentifier,isStr,isTranslationUnit] noreturn:[isStr]
isStdNamespace call:[isNamespace,isStd] noreturn:[isStd]
isTemplate call:[GlobalDecl,getDecl,getPrimaryTemplate,getSpecializedTemplate,getTemplateArgs,getTemplateSpecializationArgs,getWithDecl] noreturn:[GlobalDecl,getWithDecl]
asTemplateName call:[TemplateName,getDecl] noreturn:[TemplateName]
mangleName call:[AdditionalAbiTags,VariableNameMangler,begin,disableDerivedAbiTags,empty,end,erase,getDecl,getSortedUniqueUsedAbiTags,makeVariableTypeTags,mangleNameWithAbiTags,set_difference,size] noreturn:[mangleNameWithAbiTags]
GetLocalClassDecl call:[getEffectiveDeclContext,isLocalContainerContext,isNamespace,isTranslationUnit] noreturn:[getEffectiveDeclContext]
mangleModuleName call:[getOwningModuleForLinkage,getPrimaryModuleInterfaceName,isExternallyVisible,mangleModuleNamePrefix] noreturn:[mangleModuleNamePrefix]
mangleModuleNamePrefix call:[empty,end,find,insert,mangleModuleNamePrefix,mangleSeqID,rsplit,size] noreturn:[insert]
mangleTemplateName call:[asTemplateName,getEffectiveDeclContext,isStdNamespace,isTranslationUnit,mangleNestedName,mangleTemplateArgs,mangleUnscopedTemplateName] noreturn:[mangleNestedName,mangleTemplateArgs]
mangleFloat call:[assert,bitcastToAPInt,buffer,data,getBitWidth,getRawData,write] noreturn:[write]
mangleFloatLiteral call:[mangleFloat,mangleType]
mangleFixedPointLiteral call:[Report,getCustomDiagID,getDiags] noreturn:[Report]
mangleNullPointer call:[mangleType]
mangleNumber call:[abs,isNegative,isSigned,print] noreturn:[print]
mangleNumber
mangleCallOffset call:[mangleNumber]
manglePrefix call:[QualType,addSubstitution,getASTContext,getDependentTemplateName,getIdentifier,getQualifier,getTemplateName,mangleSubstitution,mangleTemplateArgs,mangleTemplatePrefix,mangleType,template_arguments] noreturn:[addSubstitution,mangleType]
mangleUnresolvedPrefix call:[QualType,getAsIdentifier,getAsNamespace,getAsNamespaceAlias,getAsType,getKind,getPrefix,llvm_unreachable,mangleSourceName,mangleSourceNameWithAbiTags,mangleUnresolvedPrefix,mangleUnresolvedTypeOrSimpleId] noreturn:[mangleUnresolvedPrefix]
mangleUnresolvedName call:[TemplateName,getAsIdentifierInfo,getCXXNameType,getNameKind,llvm_unreachable,mangleOperatorName,mangleSourceName,mangleTemplateArgs,mangleUnresolvedPrefix,mangleUnresolvedTypeOrSimpleId] noreturn:[llvm_unreachable,mangleTemplateArgs,mangleUnresolvedPrefix]
mangleRegCallName call:[getASTContext,getLangOpts,getLength,getName,sizeof] noreturn:[getName]
mangleDeviceStubName call:[getLength,getName,sizeof] noreturn:[getName]
mangleSourceName call:[getLength,getName] noreturn:[getName]
mangleNestedName call:[asTemplateName,mangleTemplateArgs,mangleTemplatePrefix]
getParentOfLocalEntity call:[GlobalDecl] noreturn:[GlobalDecl]
mangleBlockForPrefix call:[GetLocalClassDecl,getClosurePrefix,getEffectiveDeclContext,isLocalContainerContext,mangleClosurePrefix,mangleLocalName,manglePrefix,mangleUnqualifiedBlock] noreturn:[mangleClosurePrefix,manglePrefix,mangleUnqualifiedBlock]
mangleUnqualifiedBlock call:[getBlockId,getBlockManglingContextDecl,getBlockManglingNumber,getDeclContext,getIdentifier,isCompatibleWith,isRecord,mangleSourceNameWithAbiTags] noreturn:[getBlockId]
mangleTemplateParamDecl call:[getExpansionTemplateParameters,getExpansionType,getNumExpansionTemplateParameters,getNumExpansionTypes,getPattern,getTemplateParameters,getType,getTypeConstraint,isCompatibleWith,isExpandedParameterPack,isParameterPack,mangleTemplateParameterList,mangleType,mangleTypeConstraint] noreturn:[getPattern,mangleTemplateParameterList,mangleType,mangleTypeConstraint]
mangleTemplateParameterList call:[getRequiresClause,mangleRequiresClause,mangleTemplateParamDecl] noreturn:[mangleTemplateParamDecl]
mangleTypeConstraint call:[empty,getEffectiveDeclContext,isStdNamespace,isTranslationUnit,mangleNestedName,mangleTemplateName,mangleUnscopedName] noreturn:[mangleNestedName,mangleTemplateName,mangleUnscopedName]
mangleTypeConstraint call:[arguments,getArgument,getNamedConcept,getTemplateArgsAsWritten,mangleTypeConstraint,push_back] noreturn:[mangleTypeConstraint,push_back]
mangleRequiresClause call:[isCompatibleWith,mangleExpression] noreturn:[mangleExpression]
mangleLambda call:[asTemplateName,assert,getASTContext,getDiscriminatorOverride,getIdentifier,getLambdaContextDecl,getLambdaManglingNumber,isCompatibleWith,isTemplate,mangleLambdaSig,mangleNumber,mangleSourceName,mangleTemplateArgs] noreturn:[mangleNumber,mangleTemplateArgs]
mangleLambdaSig call:[getGenericLambdaTemplateParameterList,getLambdaExplicitTemplateParameters,getLambdaStaticInvoker,getLambdaTypeInfo,getRequiresClause,getType,mangleBareFunctionType,mangleRequiresClause,mangleTemplateParamDecl] noreturn:[mangleBareFunctionType,mangleRequiresClause,mangleTemplateParamDecl]
manglePrefix call:[QualType,addSubstitution,assert,getAsIdentifier,getAsNamespace,getAsNamespaceAlias,getAsType,getKind,getNamespace,getPrefix,isCompatibleWith,llvm_unreachable,mangleName,manglePrefix,mangleSourceName,mangleSubstitution] noreturn:[addSubstitution,llvm_unreachable]
manglePrefix call:[addSubstitution,asTemplateName,assert,getClosurePrefix,getEffectiveDeclContext,isLocalContainerContext,isTemplate,isTranslationUnit,mangleClosurePrefix,manglePrefix,mangleSubstitution,mangleTemplateArgs,mangleTemplatePrefix,mangleUnqualifiedName] noreturn:[addSubstitution,mangleTemplateArgs,mangleUnqualifiedName]
mangleTemplatePrefix call:[addSubstitution,assert,getAsDependentTemplateName,getAsTemplateDecl,getIdentifier,getOperator,getQualifier,isCompatibleWith,mangleOperatorName,manglePrefix,mangleSourceName,mangleSubstitution,mangleTemplatePrefix] noreturn:[addSubstitution,mangleOperatorName,manglePrefix,mangleSourceName,mangleTemplatePrefix]
mangleTemplatePrefix call:[addSubstitution,getDecl,getDepth,getEffectiveDeclContext,getIndex,getTemplatedDecl,getWithDecl,manglePrefix,mangleSubstitution,mangleTemplateParameter,mangleUnqualifiedName] noreturn:[addSubstitution,mangleTemplateParameter,mangleUnqualifiedName]
getClosurePrefix call:[getBlockManglingContextDecl,getLambdaContextDecl,hasGlobalStorage,isCompatibleWith,isLambda]
mangleClosurePrefix call:[addSubstitution,asTemplateName,getEffectiveDeclContext,isTemplate,manglePrefix,mangleSubstitution,mangleTemplateArgs,mangleTemplatePrefix,mangleUnqualifiedName] noreturn:[addSubstitution,mangleTemplateArgs,mangleUnqualifiedName]
mangleType call:[addSubstitution,assert,getAsDependentTemplateName,getAsSubstTemplateTemplateParm,getAsTemplateDecl,getDepth,getIdentifier,getIndex,getKind,getQualifier,getReplacement,isIdentifier,llvm_unreachable,mangleName,mangleSourceName,mangleSubstitution,mangleTemplateParameter,mangleType,mangleUnresolvedPrefix] noreturn:[addSubstitution,llvm_unreachable,mangleName,mangleTemplateParameter]
mangleUnresolvedTypeOrSimpleId call:[TemplateName,assert,desugar,getASTContext,getAsSubstTemplateTemplateParm,getAsTemplateDecl,getDecl,getDependentTemplateName,getIdentifier,getKind,getNamedType,getQualifier,getReplacement,getTemplateName,getTypeClass,llvm_unreachable,mangleExistingSubstitution,mangleSourceName,mangleSourceNameWithAbiTags,mangleTemplateArgs,mangleType,mangleUnresolvedTypeOrSimpleId,template_arguments] noreturn:[mangleUnresolvedTypeOrSimpleId]
mangleOperatorName call:[getCXXLiteralIdentifier,getCXXNameType,getCXXOverloadedOperator,getNameKind,llvm_unreachable,mangleOperatorName,mangleSourceName,mangleType]
mangleOperatorName call:[llvm_unreachable] noreturn:[llvm_unreachable]
mangleQualifiers call:[addressSpaceMapManglingFor,empty,getASTContext,getAddrSpaceExpr,getAddressSpace,getObjCLifetime,getTargetAddressSpace,getTargetInfo,getTriple,hasAddressSpace,hasConst,hasRestrict,hasUnaligned,hasVolatile,isOSzOS,llvm_unreachable,mangleExpression,mangleVendorQualifier,utostr] noreturn:[mangleVendorQualifier,utostr]
mangleVendorQualifier call:[size]
mangleVendorType call:[size]
mangleRefQualifier
mangleObjCMethodName call:[mangleObjCMethodNameAsSourceName] noreturn:[mangleObjCMethodNameAsSourceName]
isTypeSubstitutable call:[getClangABICompat,getDeducedType,getLangOpts,isBuiltinType,isNull,isOpenCLSpecificType,isSVESizelessBuiltinType,isSpecificBuiltinType]
mangleType call:[QualType,Qualifiers,addSubstitution,getASTContext,getAsArrayType,getCanonicalType,getPointeeType,getSingleStepDesugaredType,getTypeClass,isDependentAddressSpaceType,isDependentType,isInstantiationDependentType,isTypeAlias,isTypeSubstitutable,mangleQualifiers,mangleSubstitution,mangleType,split,while] noreturn:[Qualifiers,addSubstitution,getCanonicalType,mangleType,while]
mangleCXXRecordDecl call:[addSubstitution,isCompatibleWith,mangleName,mangleSubstitution] noreturn:[addSubstitution]
getCallingConvQualifierName call:[llvm_unreachable] noreturn:[llvm_unreachable]
mangleExtFunctionInfo call:[ExtInfo,empty,getCC,getCallingConvQualifierName,getExtInfo,mangleVendorQualifier] noreturn:[mangleVendorQualifier]
mangleExtParameterInfo call:[getABI,getParameterABISpelling,isConsumed,isNoEscape,mangleVendorQualifier] noreturn:[mangleVendorQualifier]
mangleBareFunctionType call:[assert,enterResultType,getASTContext,getExtInfo,getExtParameterInfo,getNumParams,getObjCLifetime,getParamDecl,getParamType,getProducesResult,getQualifiedType,getReturnType,getSignatureParameterType,getTrailingRequiresClause,getType,hasExtParameterInfos,isDynamic,isVariadic,leaveResultType,mangleExtParameterInfo,mangleRequiresClause,mangleType,mangleVendorQualifier,pop,push,removeObjCLifetime,split] noreturn:[getQualifiedType,getType,leaveResultType,mangleExtParameterInfo,mangleRequiresClause,mangleVendorQualifier,pop]
mangleType call:[getDecl,mangleName] noreturn:[mangleName]
mangleNeonVectorType call:[assert,getASTContext,getElementType,getKind,getNumElements,getTypeSize,getVectorKind,isBuiltinType,llvm_unreachable,strlen] noreturn:[llvm_unreachable]
mangleNeonVectorType call:[Report,getAttributeLoc,getCustomDiagID,getDiags] noreturn:[Report]
mangleAArch64VectorBase call:[getKind,llvm_unreachable] noreturn:[llvm_unreachable]
mangleAArch64NeonVectorType call:[Twine,assert,getASTContext,getElementType,getKind,getNumElements,getTypeSize,getVectorKind,isBuiltinType,length,llvm_unreachable,mangleAArch64VectorBase,str] noreturn:[llvm_unreachable,mangleAArch64VectorBase]
mangleAArch64NeonVectorType call:[Report,getAttributeLoc,getCustomDiagID,getDiags] noreturn:[Report]
mangleAArch64FixedSveVectorType call:[assert,getASTContext,getElementType,getKind,getTypeInfo,getVectorKind,isBuiltinType,llvm_unreachable,mangleVendorType] noreturn:[llvm_unreachable]
mangleAArch64FixedSveVectorType call:[Report,getAttributeLoc,getCustomDiagID,getDiags] noreturn:[Report]
mangleRISCVFixedRVVVectorType call:[TypeNameOS,assert,getASTContext,getElementType,getKind,getLangOpts,getTargetInfo,getTypeInfo,getVScaleRange,getVectorKind,isBuiltinType,llvm_unreachable,mangleVendorType] noreturn:[llvm_unreachable]
mangleRISCVFixedRVVVectorType call:[Report,getAttributeLoc,getCustomDiagID,getDiags] noreturn:[Report]
mangleIntegerLiteral call:[getBoolValue,isBooleanType,mangleNumber,mangleType] noreturn:[mangleNumber]
mangleMemberExprBase call:[getBase,getDecl,getType,isAnonymousStructOrUnion,isArrow,isImplicitCXXThis,mangleExpression] noreturn:[isArrow,mangleExpression]
mangleMemberExpr call:[mangleMemberExprBase,mangleUnresolvedName] noreturn:[mangleMemberExprBase,mangleUnresolvedName]
isParenthesizedADLCallee call:[IgnoreParens,assert,decls_begin,getCallee,getNumDecls,getQualifier,isCXXClassMember,requiresADL]
mangleCastExpression call:[getSubExpr,getType,mangleExpression,mangleType] noreturn:[mangleExpression]
mangleInitListElements call:[getInit,getNumInits,getSyntacticForm,mangleExpression] noreturn:[mangleExpression]
mangleRequirement call:[HandleSubstitutionFailure,Report,getConstraintExpr,getCustomDiagID,getDiags,getExpr,getExprSubstitutionDiagnostic,getKind,getReturnTypeRequirement,getSubstitutionDiagnostic,getType,getTypeConstraint,hasInvalidConstraint,hasNoexceptRequirement,isEmpty,isExprSubstitutionFailure,isSubstitutionFailure,mangleExpression,mangleType,mangleTypeConstraint] noreturn:[HandleSubstitutionFailure,mangleTypeConstraint]
mangleExpression call:[APFloat,APSInt,EvaluateKnownConstInt,IgnoreImplicit,MangleAlignofSizeofArg,MangleDeclRefExpr,NotPrimaryExpr,Report,Value,arg_begin,arg_end,arguments,assert,designators,empty,enterResultType,getAPValueResult,getASTContext,getAllocatedType,getArg,getArgs,getArgument,getArgumentExpr,getArgumentType,getArrayIndex,getArrayRangeEnd,getArrayRangeStart,getBase,getBridgeKindName,getCallee,getColumnIdx,getConceptNameInfo,getCond,getCustomDiagID,getDecl,getDeclName,getDecomposedForm,getDepth,getDestroyedType,getDiags,getExpr,getExprLoc,getExprOperand,getFieldName,getFirstQualifierFoundInScope,getIndex,getInit,getInitVal,getInitializationStyle,getInitializer,getKind,getLHS,getLParenLoc,getLambdaClass,getLocalParameters,getMember,getMemberDecl,getMemberName,getName,getNamedConcept,getNestedNameSpecifier,getNestedNameSpecifierLoc,getNumArgs,getNumExprs,getNumTemplateArgs,getOpcode,getOperand,getOperator,getOverloadedOperator,getPack,getParameterPack,getParameterType,getParenOrBraceRange,getPartialArguments,getPattern,getQualifier,getRHS,getRecordType,getReplacement,getRequirements,getRowIdx,getScopeTypeInfo,getSemantics,getSignatureParameterType,getSourceRange,getStmtClass,getStmtClassName,getSubExpr,getTemplateArgs,getTemplateArgsAsWritten,getTemplateArguments,getTrait,getTraitSpelling,getType,getTypeOperand,getTypeSourceInfo,getValue,hasAPValueResult,hasInitializer,isArgumentType,isArray,isArrayDesignator,isArrayForm,isArrayRangeDesignator,isArrow,isCompatibleWith,isFieldDesignator,isGlobalDelete,isGlobalNew,isImplicitAccess,isInstantiationDependent,isIntegerType,isInvalid,isLeftFold,isListInitialization,isNull,isParenthesizedADLCallee,isPartiallySubstituted,isSignedIntegerType,isStdInitListInitialization,isTypeOperand,isValid,llvm_unreachable,mangle,mangleCastExpression,mangleExpression,mangleFixedPointLiteral,mangleFloat,mangleFloatLiteral,mangleFunctionParam,mangleInitListElements,mangleIntegerLiteral,mangleMemberExpr,mangleMemberExprBase,mangleNumber,mangleOperatorName,mangleRequirement,mangleSourceName,mangleTemplateArg,mangleTemplateArgExpr,mangleTemplateName,mangleTemplateParameter,mangleType,mangleUnresolvedName,mangleUnresolvedPrefix,mangleUnresolvedTypeOrSimpleId,mangleValueInTemplateArg,mangleVendorType,placement_arg_begin,placement_arg_end,pop,push,setIsSigned,size] noreturn:[IgnoreImplicit,mangleCastExpression,mangleExpression,mangleFloat,mangleFunctionParam,mangleInitListElements,mangleMemberExprBase,mangleNumber,mangleOperatorName,mangleRequirement,mangleSourceName,mangleTemplateArg,mangleTemplateArgExpr,mangleTemplateParameter,mangleType,mangleUnresolvedPrefix,setIsSigned]
mangleFunctionParam call:[assert,getDepth,getFunctionScopeDepth,getFunctionScopeIndex,getPointeeType,getQualifiers,getType,isArrayType,isInResultType,mangleQualifiers] noreturn:[mangleQualifiers]
mangleCXXCtorType call:[llvm_unreachable,mangleName] noreturn:[llvm_unreachable,mangleName]
mangleCXXDtorType
TemplateArgManglingInfo call:[getAsTemplateDecl]
isOverloadable call:[getDeclContext,isGenericLambda]
needToMangleTemplateParam call:[CXXNameMangler,MangleTemplateParamListToString,Stream,assert,getAsTemplateDecl,getAsTemplateOrTemplatePattern,getContainedDeducedType,getDepth,getKind,getTemplateDeclAndDefaultArgs,getTemplateParameters,getType,hasTypeConstraint,isInstantiationDependentType,mangleTemplateParameterList,needToMangleTemplateParam,pack_begin,pack_size] noreturn:[getContainedDeducedType,hasTypeConstraint,mangleTemplateParameterList,needToMangleTemplateParam]
getArgInfo call:[assert,getContainedDeducedType,getKind,getParam,getTemplateParameters,getType,isOverloadable,isPackExpansion,isParameterPack,needToMangleTemplateParam,size]
getTrailingRequiresClauseToMangle call:[getRequiresClause,getTemplateParameters,isOverloadable] noreturn:[getRequiresClause]
mangleTemplateArgs call:[Info,getArgument,getTrailingRequiresClauseToMangle,mangleRequiresClause,mangleTemplateArg] noreturn:[mangleTemplateArg]
mangleTemplateArgs call:[Info,getTrailingRequiresClauseToMangle,mangleRequiresClause,mangleTemplateArg,size] noreturn:[mangleTemplateArg]
mangleTemplateArgs call:[Info,getTrailingRequiresClauseToMangle,mangleRequiresClause,mangleTemplateArg,size] noreturn:[mangleTemplateArg]
mangleTemplateArg call:[getArgInfo,isCompatibleWith,mangleTemplateArg,mangleTemplateParamDecl] noreturn:[mangleTemplateArg,mangleTemplateParamDecl]
mangleTemplateArg call:[APValue,ArrayIndex,LValueBase,Zero,getASTContext,getAsDecl,getAsExpr,getAsIntegral,getAsStructuralValue,getAsTemplate,getAsTemplateOrTemplatePattern,getAsType,getCanonicalTemplateArgument,getDecayedType,getIntegralType,getKind,getNullPtrType,getParamTypeForDecl,getStructuralValueType,getType,getUnqualifiedType,getValue,hasSimilarType,isArrayType,isCXXInstanceMember,isCompatibleWith,isDependent,isInstantiationDependent,isRecordType,llvm_unreachable,mangleIntegerLiteral,mangleNullPointer,mangleTemplateArg,mangleTemplateArgExpr,mangleType,mangleValueInTemplateArg,pack_elements] noreturn:[APValue,getCanonicalTemplateArgument,mangleTemplateArg]
mangleTemplateArgExpr call:[IgnoreParenImpCasts,getDecl,isCompatibleWith,mangle,mangleExpression]
isZeroInitialized call:[ElemT,assert,bases,declaresSameEntity,fields,getArrayElementTypeNoTypeQual,getArrayFiller,getArrayInitializedElt,getArrayInitializedElts,getAsCXXRecordDecl,getComplexFloatImag,getComplexFloatReal,getComplexIntImag,getComplexIntReal,getElementType,getFixedPoint,getFloat,getInt,getKind,getMemberPointerDecl,getStructBase,getStructField,getType,getUnionField,getUnionValue,getValue,getVectorElt,getVectorLength,hasArrayFiller,isNullPointer,isPosZero,isUnnamedBitField,isZeroInitialized,llvm_unreachable] noreturn:[getMemberPointerDecl,isZeroInitialized,llvm_unreachable]
getLValueType call:[getAsArrayType,getAsBaseOrMember,getElementType,getLValueBase,getLValuePath,getPointer,getRecordType,getType] noreturn:[getElementType,getRecordType,getType]
getUnionInitName call:[Report,fields,getAsCXXRecordDecl,getCustomDiagID,getIdentifier,getType,getUnionInitName,isBitField] noreturn:[getIdentifier]
mangleValueInTemplateArg call:[Bases,ElemT,Fields,NotPrimaryExpr,QualType,assert,back,bases_begin,bases_end,drop_back,empty,fields,getASTContext,getArrayElementTypeNoTypeQual,getArrayFiller,getArrayInitializedElt,getArrayInitializedElts,getArraySize,getAsArrayIndex,getAsArrayTypeUnsafe,getAsBaseOrMember,getAsCXXRecordDecl,getBoolValue,getClangABICompat,getComplexFloatImag,getComplexFloatReal,getComplexIntImag,getComplexIntReal,getDecayedType,getDiags,getElementType,getFieldIndex,getFloat,getInt,getKind,getLValueBase,getLValueOffset,getLValuePath,getLValueType,getLangOpts,getLocation,getMemberPointerDecl,getMemberPointerPath,getMemberPointerPathAdjustment,getParent,getPointeeType,getPointer,getPointerDiffType,getQuantity,getRecordType,getSize,getStructBase,getStructField,getType,getUnionField,getUnionInitName,getUnionValue,getUnqualifiedArrayType,getUnqualifiedType,getVectorElt,getVectorLength,hasArrayFiller,hasLValuePath,hasSameType,hasSimilarType,isArrayType,isCompatibleWith,isLValueOnePastTheEnd,isNullPointer,isPointerOrReferenceType,isPointerType,isPosZero,isReferenceType,isUnion,isUnnamedBitField,isVoidPointerType,isZero,isZeroInitialized,llvm_unreachable,mangle,mangleExpression,mangleFixedPointLiteral,mangleFloatLiteral,mangleIntegerLiteral,mangleNullPointer,mangleNumber,mangleSourceName,mangleType,mangleValueInTemplateArg,pop_back,size] noreturn:[drop_back,getAsArrayIndex,getElementType,getRecordType,getType,hasSimilarType,llvm_unreachable,mangleExpression,mangleFloatLiteral,mangleIntegerLiteral,mangleNumber,mangleSourceName,mangleType,mangleValueInTemplateArg,pop_back]
mangleTemplateParameter
mangleSeqID call:[BufferRef,base,rbegin,write] noreturn:[write]
mangleExistingSubstitution call:[assert,mangleSubstitution]
mangleSubstitution call:[getCanonicalDecl,mangleStandardSubstitution,mangleSubstitution] noreturn:[mangleSubstitution]
mangleSubstitution call:[assert,getASTContext,getCanonicalNestedNameSpecifier,getKind,mangleSubstitution] noreturn:[mangleSubstitution]
hasMangledSubstitutionQualifiers call:[getCVRQualifiers,getQualifiers,hasAddressSpace,hasUnaligned] noreturn:[hasUnaligned]
mangleSubstitution call:[getAsOpaquePtr,getDecl,hasMangledSubstitutionQualifiers,mangleSubstitution] noreturn:[mangleSubstitution]
mangleSubstitution call:[getASTContext,getAsTemplateDecl,getAsVoidPointer,getCanonicalTemplateName,mangleSubstitution] noreturn:[mangleSubstitution]
mangleSubstitution call:[end,find,mangleSeqID]
isSpecializedAs call:[getAsType,getDecl,getEffectiveDeclContext,getIdentifier,getOwningModuleForLinkage,getSpecializedTemplate,getTemplateArgs,isNull,isStdNamespace,isStr,size]
isStdCharSpecialization call:[getAsType,getIdentifier,getOwningModuleForLinkage,getSpecializedTemplate,getTemplateArgs,isNull,isSpecializedAs,isSpecificBuiltinType,isStr,size]
mangleStandardSubstitution call:[getEffectiveDeclContext,getIdentifier,getOwningModuleForLinkage,getSpecializedTemplate,isStd,isStdCharSpecialization,isStdNamespace,isStr]
addSubstitution call:[addSubstitution,getAsOpaquePtr,getDecl,hasMangledSubstitutionQualifiers] noreturn:[addSubstitution]
addSubstitution call:[addSubstitution,getASTContext,getAsTemplateDecl,getAsVoidPointer,getCanonicalTemplateName] noreturn:[addSubstitution]
addSubstitution call:[assert,count]
extendSubstitutions call:[assert,swap]
makeFunctionReturnTypeTags call:[AbiTagList,TrackReturnTypeTags,disableDerivedAbiTags,enterResultType,getReturnType,getSortedUniqueUsedAbiTags,getType,leaveResultType,mangleType,pop,push] noreturn:[AbiTagList,getSortedUniqueUsedAbiTags]
makeVariableTypeTags call:[AbiTagList,TrackVariableType,disableDerivedAbiTags,getSortedUniqueUsedAbiTags,getType,mangleType] noreturn:[AbiTagList,getSortedUniqueUsedAbiTags]
shouldHaveAbiTags call:[TrackAbiTags,getUsedAbiTags,mangle,size] noreturn:[size]
mangleCXXName call:[CrashInfo,GlobalDecl,Mangler,SourceLocation,assert,getASTContext,getCtorType,getDecl,getDtorType,getSourceManager,mangle] noreturn:[mangle]
mangleCXXCtorComdat call:[GlobalDecl,Mangler,mangle] noreturn:[mangle]
mangleCXXDtorComdat call:[GlobalDecl,Mangler,mangle] noreturn:[mangle]
mangleOverrideDiscrimination call:[baseForVTableAuthentication,getAddressDiscrimination,getCustomDiscriminationValue,getExtraDiscrimination,getKey,getLangOpts,getPointeeCXXRecordDecl,getPointerAuthVTablePointerDiscriminator,getStream,mangleVendorQualifier]
mangleThunk call:[Mangler,assert,getASTContext,getStream,isEmpty,mangleCallOffset,mangleFunctionEncoding,mangleOverrideDiscrimination] noreturn:[mangleCallOffset,mangleOverrideDiscrimination]
mangleCXXDtorThunk call:[GlobalDecl,Mangler,getASTContext,getStream,mangleCallOffset,mangleFunctionEncoding,mangleOverrideDiscrimination] noreturn:[mangleOverrideDiscrimination]
mangleStaticGuardVariable call:[Mangler,getStream,mangleName] noreturn:[mangleName]
mangleDynamicInitializer
mangleDynamicAtExitDestructor call:[Mangler,getName,getStream,mangle,shouldMangleDeclName] noreturn:[getName,mangle]
mangleDynamicStermFinalizer call:[Mangler,getName,getStream,mangle,shouldMangleDeclName] noreturn:[getName,mangle]
mangleSEHFilterExpression call:[Mangler,getDecl,getName,getStream,mangle,shouldMangleDeclName] noreturn:[getName,mangle]
mangleSEHFinallyBlock call:[Mangler,getDecl,getName,getStream,mangle,shouldMangleDeclName] noreturn:[getName,mangle]
mangleItaniumThreadLocalInit call:[Mangler,getStream,mangleName] noreturn:[mangleName]
mangleItaniumThreadLocalWrapper call:[Mangler,getStream,mangleName] noreturn:[mangleName]
mangleReferenceTemporary call:[Mangler,assert,getStream,mangleName,mangleSeqID] noreturn:[mangleSeqID]
mangleCXXVTable call:[Mangler,getStream,mangleCXXRecordDecl] noreturn:[mangleCXXRecordDecl]
mangleCXXVTT call:[Mangler,getStream,mangleCXXRecordDecl] noreturn:[mangleCXXRecordDecl]
mangleCXXCtorVTable call:[Mangler,getStream,mangleCXXRecordDecl] noreturn:[mangleCXXRecordDecl]
mangleCXXRTTI call:[Mangler,assert,getStream,hasQualifiers,mangleType] noreturn:[mangleType]
mangleCXXRTTIName call:[Mangler,getStream,mangleType] noreturn:[mangleType]
mangleCanonicalTypeName call:[mangleCXXRTTIName] noreturn:[mangleCXXRTTIName]
mangleStringLiteral call:[llvm_unreachable] noreturn:[llvm_unreachable]
mangleLambdaSig call:[Mangler,mangleLambdaSig] noreturn:[mangleLambdaSig]
mangleModuleInitializer call:[Mangler,StringRef,find,getPrimaryModuleInterfaceName,getStream,isModulePartition,mangleModuleNamePrefix,size] noreturn:[mangleModuleNamePrefix]
