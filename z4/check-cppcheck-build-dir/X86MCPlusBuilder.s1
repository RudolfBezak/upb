X86MCSymbolizer
isMOVSX64rm32 call:[getOpcode]
isADD64rr call:[getOpcode]
isADDri call:[getOpcode]
createIncMemory call:[addOperand,back,clear,create,createExpr,createImm,createReg,emplace_back,setOpcode]
createTargetSymbolizer
isBranch call:[isBranch,isTailCall] noreturn:[isTailCall]
isNoop call:[getOpcode,isNOP] noreturn:[isNOP]
getCondCode call:[get,getImm,getOpcode,getOperand,isJCC] noreturn:[getImm]
getInvertedCondCode
getCondCodesLogicalOr call:[decodeCondCode]
isValidCondCode call:[return] noreturn:[return]
isBreakpoint call:[getOpcode]
isPrefix call:[get,getOpcode,isPrefix] noreturn:[isPrefix]
isRep call:[getFlags]
deleteREPPrefix call:[getFlags,setFlags]
isIndirectCall call:[getMemoryOperandNo,getOperand,isCall,isReg]
isPop call:[getPopSize]
isTerminateBranch call:[getOpcode]
getPopSize call:[getOpcode]
isPush call:[getPushSize]
getPushSize call:[getOpcode]
isSUB call:[getOpcode,isSUB] noreturn:[isSUB]
isLEA64r call:[getOpcode]
isLeave call:[getOpcode]
isMoveMem2Reg call:[getOpcode]
isUnsupportedInstruction call:[getOpcode]
mayLoad call:[get,getMemoryOperandNo,getOpcode,isPop,mayLoad] noreturn:[mayLoad]
mayStore call:[get,getMemoryOperandNo,getOpcode,isPush,mayStore] noreturn:[mayStore]
isCleanRegXOR call:[getOpcode,getOperand,getReg,return] noreturn:[return]
isPacked call:[get,getOpcode,return]
shouldRecordCodeRelocation call:[llvm_unreachable] noreturn:[llvm_unreachable]
getTrapFillValue call:[StringRef] noreturn:[StringRef]
IndJmpMatcherFrag1
match call:[getMemoryOperandNo,getOpcode,match]
annotate call:[addAnnotation,annotate] noreturn:[annotate]
matchIndJmp call:[IndJmpMatcherFrag1,move]
IndJmpMatcherFrag2
match call:[getOpcode,match] noreturn:[match]
annotate call:[addAnnotation,annotate] noreturn:[annotate]
matchIndJmp call:[IndJmpMatcherFrag2,move]
LoadMatcherFrag1
match call:[getMemoryOperandNo,getOpcode,match]
annotate call:[addAnnotation,annotate] noreturn:[annotate]
matchLoad call:[LoadMatcherFrag1,move]
AddMatcher
match call:[getOpcode,match] noreturn:[match]
annotate call:[addAnnotation,annotate] noreturn:[annotate]
matchAdd call:[AddMatcher,move]
LEAMatcher
match call:[getImm,getOpcode,getOperand,getReg,match] noreturn:[match]
annotate call:[addAnnotation,annotate] noreturn:[annotate]
matchLoadAddr call:[LEAMatcher,move]
hasPCRelOperand call:[getReg,isReg]
getMemoryOperandNo call:[get,getMemoryOperandNo,getOpcode,getOperandBias] noreturn:[getOperandBias]
hasEVEXEncoding call:[get,getOpcode,return]
evaluateX86MemoryOperand call:[getExpr,getImm,getMemoryOperandNo,getNumPrimeOperands,getOperand,getReg,isExpr,isImm,isReg]
evaluateMemOperandTarget call:[assert,evaluateX86MemoryOperand]
getMemOperandDisp call:[begin,end,getMemoryOperandNo] noreturn:[end]
replaceMemOperandDisp call:[end,getMemOperandDisp]
getRegsUsedAsParams call:[BitVector,getAliases,getNumRegs]
getCalleeSavedRegs call:[getAliases] noreturn:[getAliases]
getDefaultDefIn call:[assert,getNumRegs,set,size] noreturn:[set]
getDefaultLiveOut call:[assert,getAliases,getNumRegs,size] noreturn:[getAliases]
getGPRegs call:[getAliases,set] noreturn:[set]
getClassicGPRegs call:[getAliases] noreturn:[getAliases]
getRepRegs call:[getAliases] noreturn:[getAliases]
getAliasSized call:[assert,getX86SubSuperRegister]
isUpper8BitReg
cannotUseREX call:[getOpcode,getReg,isReg,isUpper8BitReg,primeOperands]
getMemDataSize call:[getMemOperandSize,getOpcode,getOperandType]
isStackAccess call:[LLVM_DEBUG,assert,dbgs,dump,evaluateX86MemoryOperand,get,getImm,getMemDataSize,getMemoryOperandNo,getNumOperands,getOpcode,getOperand,getPopSize,getPushSize,getReg,isCall,isImm,isReg,mayLoad,mayStore] noreturn:[getImm,getReg]
changeToPushOrPop call:[addOperand,assert,clear,createImm,createReg,evaluateX86MemoryOperand,getImm,getMemoryOperandNo,getOpcode,getOperand,getReg,isImm,isPop,isPush,isReg,llvm_unreachable,setOpcode] noreturn:[addOperand,llvm_unreachable]
isStackAdjustment call:[any_of,defOperands,getOpcode,getReg,isReg] noreturn:[any_of]
evaluateStackOffsetExpr call:[evaluateX86MemoryOperand,getImm,getOpcode,getOperand,getOperandVal,getReg,isImm,make_error_code] noreturn:[getImm,make_error_code]
isRegToRegMove call:[getFramePointer,getOpcode,getOperand,getReg,getStackPointer]
getStackPointer
getFramePointer
getFlagsReg
escapesVariable call:[BitVector,SPAliases,SPBPAliases,any_of,assert,defOperands,get,getAliases,getMemoryOperandNo,getNumDefs,getNumPrimeOperands,getOpcode,getOperand,getReg,isPush,isReg,mayLoad,mayStore] noreturn:[any_of]
addToImm call:[getImm,getMemoryOperandNo,getNumPrimeOperands,getOpcode,getOperand,int64_t,int8_t,isImm,setImm,setOpcode]
replaceMemOperandWithImm call:[DataExtractor,addOperand,assert,clear,createImm,getMemoryOperandNo,getOpcode,getOperand,getPopSize,getSigned,setOpcode,size] noreturn:[addOperand]
replaceMemOperandWithReg call:[addOperand,clear,createReg,getOpcode,getOperand,getPopSize,setOpcode]
isRedundantMove call:[assert,getOpcode,getOperand,getReg,isReg] noreturn:[getReg]
requiresAlignedAddress call:[get,getNumOperands,getOpcode,operands]
convertJmpToTailCall call:[getOpcode,isTailCall,setOpcode,setTailCall]
convertTailCallToJmp call:[clearOffset,getOpcode,removeAnnotation,setOpcode]
convertTailCallToCall call:[getOpcode,removeAnnotation,setOpcode]
createIndirectPltCall call:[assert,begin,create,createExpr,createImm,createReg,emplace_back,erase,getOpcode,insert,isTailCall,setOpcode]
convertIndirectCallToLoad call:[LLVM_DEBUG,begin,createReg,dump,getOpcode,insert,isTailCall,llvm_unreachable,removeAnnotation,setOpcode] noreturn:[llvm_unreachable,removeAnnotation]
shortenInstruction call:[createReg,get,getFlags,getImm,getMemoryOperandNo,getNumPrimeOperands,getOpcode,getOpcodeForShortImmediateForm,getOperand,getReg,getShortBranchOpcode,int32_t,int64_t,int8_t,isBranch,isImm,needsAddressSizeOverride,setFlags,setOpcode] noreturn:[createReg,getShortBranchOpcode,setFlags]
convertMoveToConditionalMove call:[begin,createImm,getNumPrimeOperands,getOpcode,getOperand,insert,isStackAccess,isSubRegisterEq,mayLoad,setOpcode]
lowerTailCall call:[getOpcode,isTailCall,removeAnnotation,setOpcode]
getTargetSymbol call:[getExpr,getKind,getNumPrimeOperands,getOperand,getSymbol,isExpr] noreturn:[getSymbol]
getTargetSymbol call:[getSymbol] noreturn:[getSymbol]
analyzeBranch call:[assert,getCondCode,getOpcode,getTargetSymbol,isBranch,isPseudo,isTailCall,isTerminator,llvm_unreachable] noreturn:[llvm_unreachable]
analyzePICJumpTable call:[LLVM_DEBUG,dbgs,evaluateX86MemoryOperand,get,getOpcode,getOperand,getProgramCounter,getReg,hasDefOfPhysReg,isIndexed,isLEA64r,isMOVSX64rm32,isRIPRel,make_tuple,swap] noreturn:[make_tuple,swap]
analyzeIndirectBranch call:[IE,II,analyzePICJumpTable,assert,evaluateX86MemoryOperand,get,getNumPrimeOperands,getOpcode,getOperand,getProgramCounter,getReg,hasDefOfPhysReg,isADD64rr,isMoveMem2Reg,isReg,tie]
analyzeVirtualMethodCall call:[End,Itr,assert,begin,evaluateX86MemoryOperand,get,getImm,getOpcode,getOperand,getReg,hasDefOfPhysReg,insert,isADDri,isCall,isIndirectBranch,isReg,mayLoad,push_back] noreturn:[getReg]
createStackPointerIncrement call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createStackPointerDecrement call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createSaveToStack call:[addOperand,clear,createImm,createReg,llvm_unreachable,setOpcode] noreturn:[addOperand]
createRestoreFromStack call:[createLoad] noreturn:[createLoad]
createLoad call:[addOperand,clear,createExpr,createImm,createReg,llvm_unreachable,setOpcode] noreturn:[addOperand]
createLoadImmediate call:[addOperand,back,clear,createImm,createReg,emplace_back,setOpcode]
createIJmp32Frag call:[addOperand,createReg,push_back,setOpcode] noreturn:[push_back]
createNoop call:[clear,setOpcode] noreturn:[clear]
createReturn call:[clear,setOpcode] noreturn:[clear]
createInlineMemcpy call:[MCInstBuilder,addImm,addReg,emplace_back] noreturn:[emplace_back]
createOneByteMemcpy call:[MCInstBuilder,addImm,addReg,emplace_back]
createCmpJE call:[MCInstBuilder,addExpr,addImm,addReg,create,emplace_back]
createRelocation call:[Relocation,assert,extractFixupExpr,getFixupKindInfo,getKind,getOffset] noreturn:[Relocation]
replaceImmWithSymbolRef call:[getImm,getNumPrimeOperands,getOperand,isImm,setOperandToSymbolRef]
replaceRegWithImm call:[addOperand,clear,createImm,get,getNumDefs,getNumOperands,getOpcode,getOperand,getPushSize,getReg,isReg,setOpcode] noreturn:[addOperand]
replaceRegWithReg call:[createReg,get,getAliasSized,getAliases,getNumDefs,getNumOperands,getOpcode,getOperand,getReg,getRegSize,isADD,isAND,isCMP,isPop,isPush,isReg,isSUB,isTEST,test]
createUncondBranch call:[addOperand,clear,create,createExpr,setOpcode] noreturn:[addOperand]
createLongUncondBranch call:[addOperand,clear,create,createExpr,setOpcode] noreturn:[addOperand]
createCall call:[addOperand,clear,create,createExpr,setOpcode] noreturn:[addOperand]
createTailCall call:[createDirectCall] noreturn:[createDirectCall]
createLongTailCall call:[back,clear,createDirectCall,emplace_back] noreturn:[createDirectCall]
createTrap call:[clear,setOpcode] noreturn:[setOpcode]
createCondBranch call:[addOperand,clear,create,createExpr,createImm,setOpcode] noreturn:[addOperand]
createLongCondBranch call:[addOperand,clear,create,createExpr,createImm,setOpcode] noreturn:[addOperand]
reverseBranchCondition call:[assert,create,createExpr,get,getCondCode,getInvertedCondCode,getOpcode,getOperand,setImm] noreturn:[createExpr]
replaceBranchCondition call:[create,createExpr,get,getOpcode,getOperand,setImm]
getCanonicalBranchCondCode
replaceBranchTarget call:[assert,create,createExpr,getOperand,isBranch,isCall,isIndirectBranch] noreturn:[createExpr]
getX86R11
getShortBranchOpcode
getIntArgRegister call:[getNoRegister] noreturn:[getNoRegister]
createPause call:[clear,setOpcode] noreturn:[setOpcode]
createLfence call:[clear,setOpcode] noreturn:[setOpcode]
createDirectCall call:[addOperand,clear,create,createExpr,setOpcode,setTailCall] noreturn:[setTailCall]
createShortJmp call:[addOperand,clear,create,createExpr,emplace_back,setOpcode,setTailCall] noreturn:[emplace_back,setTailCall]
isConditionalMove call:[getOpcode,return] noreturn:[return]
isBranchOnMem call:[getOpcode,isTailCall]
isBranchOnReg call:[getOpcode,isTailCall]
createPushRegister call:[addOperand,clear,createReg,llvm_unreachable,setOpcode] noreturn:[addOperand,llvm_unreachable]
createPopRegister call:[addOperand,clear,createReg,llvm_unreachable,setOpcode] noreturn:[addOperand,llvm_unreachable]
createPushFlags call:[createPushRegister] noreturn:[createPushRegister]
createPopFlags call:[createPopRegister] noreturn:[createPopRegister]
createAddRegImm call:[addOperand,clear,createImm,createReg,llvm_unreachable,setOpcode] noreturn:[addOperand,llvm_unreachable]
createClearRegWithNoEFlagsUpdate call:[addOperand,clear,createImm,createReg,getAliasSized,llvm_unreachable,setOpcode] noreturn:[addOperand,llvm_unreachable]
createX86SaveOVFlagToRegister call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createX86Lahf call:[clear,setOpcode] noreturn:[clear]
createX86Sahf call:[clear,setOpcode] noreturn:[clear]
createInstrIncMemory call:[Instrs,assert,begin,copy,createAddRegImm,createClearRegWithNoEFlagsUpdate,createIncMemory,createPopRegister,createPushRegister,createStackPointerDecrement,createStackPointerIncrement,createX86Lahf,createX86Sahf,createX86SaveOVFlagToRegister,end,size] noreturn:[createStackPointerDecrement,createStackPointerIncrement]
createSwap call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createIndirectBranch call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createInstrumentedIndirectCall call:[SPAliases,any_of,back,begin,convertIndirectCallToLoad,createDirectCall,createLoadImmediate,createPushRegister,createStackPointerDecrement,createStackPointerIncrement,emplace_back,end,getAliases,getIntArgRegister,getReg,insert,isReg,isTailCall,move,moveAnnotations,stripAnnotations,useOperands] noreturn:[createStackPointerDecrement,createStackPointerIncrement]
createInstrumentedIndCallHandlerExitBB call:[Insts,createIndirectBranch,createPopFlags,createPopRegister,createStackPointerDecrement,createSwap,getIntArgRegister]
createInstrumentedIndTailCallHandlerExitBB call:[Insts,createIndirectBranch,createPopFlags,createPopRegister,createStackPointerDecrement,getIntArgRegister]
createInstrumentedIndCallHandlerEntryBB call:[addOperand,back,begin,createCmpJE,createDirectCall,createMove,createPushFlags,createReg,emplace_back,end,getIntArgRegister,insert,setOpcode]
createNumCountersGetter call:[Insts,createMove,createReturn,getOrCreateSymbol]
createInstrLocationsGetter call:[Insts,createLea,createReturn,getOrCreateSymbol]
createInstrTablesGetter call:[Insts,createLea,createReturn,getOrCreateSymbol]
createInstrNumFuncsGetter call:[Insts,createMove,createReturn,getOrCreateSymbol]
createSymbolTrampoline call:[Insts,createUncondBranch]
indirectCallPromotion call:[BlocksVectorTy,InstructionListType,addEHInfo,addGnuArgsSize,addOperand,assert,back,clear,count,create,createAdd,createExpr,createImm,createNamedTempSymbol,createReg,createUncondBranch,emplace_back,empty,get,getEHInfo,getGnuArgsSize,getJumpTable,getNumOperands,getNumPrimeOperands,getOffset,getOpcode,getOperand,getReg,insert,int32_t,int64_t,isBranchOnReg,isInst,isInvoke,isReg,isTailCall,jumpToMergeBlock,push_back,setOffset,setOpcode,setTailCall,size] noreturn:[BlocksVectorTy,addEHInfo,addGnuArgsSize,addOperand,assert,createAdd,createNamedTempSymbol,createUncondBranch,emplace_back,insert,jumpToMergeBlock,push_back,setOffset,setOpcode,setTailCall]
jumpTablePromotion call:[BlocksVectorTy,InstructionListType,MCInst,addOperand,assert,back,create,createExpr,createImm,createNamedTempSymbol,createReg,emplace_back,getJumpTable,getLoc,getSubtargetInfo,int32_t,int64_t,push_back,setLoc,setOpcode,shortenInstruction,size] noreturn:[BlocksVectorTy,addOperand,push_back]
createMove call:[addOperand,clear,create,createExpr,createImm,createReg,setOpcode] noreturn:[addOperand]
createLea call:[addOperand,clear,create,createExpr,createImm,createReg,setOpcode] noreturn:[addOperand]
createX86MCPlusBuilder call:[X86MCPlusBuilder] noreturn:[X86MCPlusBuilder]
