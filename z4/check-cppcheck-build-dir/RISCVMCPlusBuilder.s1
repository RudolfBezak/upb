equals call:[equals,getKind,getSubExpr] noreturn:[equals]
getCalleeSavedRegs call:[getAliases] noreturn:[getAliases]
shouldRecordCodeRelocation call:[llvm_unreachable] noreturn:[llvm_unreachable]
isNop call:[getImm,getOpcode,getOperand,getReg]
isCNop call:[getOpcode]
isNoop call:[isCNop,isNop] noreturn:[isCNop]
isPseudo call:[getOpcode,isPseudo]
isIndirectCall call:[getOpcode,isCall]
hasPCRelOperand call:[getOpcode]
getInvertedBranchOpcode call:[llvm_unreachable]
reverseBranchCondition call:[getInvertedBranchOpcode,getOpcode,replaceBranchTarget,setOpcode] noreturn:[replaceBranchTarget]
replaceBranchTarget call:[assert,create,createExpr,getOperand,getSymbolRefOperandNum,isBranch,isCall,isIndirectBranch] noreturn:[createExpr]
analyzeIndirectBranch call:[getOpcode,getOperand,getReg,isRISCVCall,prev]
convertJmpToTailCall call:[getOpcode,isTailCall,llvm_unreachable,setTailCall]
createReturn call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createUncondBranch call:[addOperand,clear,create,createExpr,createReg,setOpcode] noreturn:[addOperand]
getTrapFillValue call:[StringRef] noreturn:[StringRef]
createCall call:[addOperand,clear,create,createExpr,setOpcode] noreturn:[addOperand]
createCall call:[createCall] noreturn:[createCall]
createTailCall call:[createCall] noreturn:[createCall]
analyzeBranch call:[assert,getTargetSymbol,isBranch,isIndirectBranch,isNoop,isPseudo,isTailCall,isTerminator,isUnconditionalBranch,llvm_unreachable] noreturn:[llvm_unreachable]
getSymbolRefOperandNum call:[getOpcode]
getTargetSymbol call:[getKind,getLHS,getSubExpr,getSymbol,getTargetSymbol] noreturn:[getSymbol,getTargetSymbol]
getTargetSymbol call:[getExpr,getOperand,getSymbolRefOperandNum,getTargetSymbol,isExpr] noreturn:[getTargetSymbol]
lowerTailCall call:[getConditionalTailCall,removeAnnotation,unsetConditionalTailCall] noreturn:[unsetConditionalTailCall]
analyzePLTEntry call:[assert,getImm,getOpcode,getOperand,getReg,isNoop]
replaceImmWithSymbolRef call:[getImm,getNumPrimeOperands,getOperand,isImm,setOperandToSymbolRef]
getTargetExprFor call:[create] noreturn:[create]
evaluateMemOperandTarget
isCallAuipc call:[getExpr,getKind,getOpcode,getOperand,isExpr]
isRISCVCall call:[assert,getOpcode,isCallAuipc]
getMinFunctionAlignment call:[hasFeature]
createRISCVMCPlusBuilder call:[RISCVMCPlusBuilder] noreturn:[RISCVMCPlusBuilder]
