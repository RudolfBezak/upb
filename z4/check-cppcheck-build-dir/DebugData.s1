replaceLocValbyForm call:[DIEInteger,DIELocList,getAttribute,replaceValue] noreturn:[replaceValue]
findAttributeInfo call:[attributes,begin,getAbbreviationDeclarationPtr,getAttributeOffsetFromIndex,getAttributeValueFromOffset,getByteSize,getDebugInfoExtractor,getDwarfUnit,getForm,getFormParams,getOffset,skipValue]
findAttributeInfo call:[findAttributeIndex,findAttributeInfo,getAbbreviationDeclarationPtr,isValid] noreturn:[findAttributeInfo]
printLE64 call:[errs,size,utohexstr] noreturn:[utohexstr]
writeAddressRanges call:[size,write] noreturn:[write]
getDWARF5Header call:[getDWARF5RngListLocListHeaderSize,sizeof,write]
updateAddressBase call:[DIEInteger,addValue,findAttribute,getAttribute,getForm,getUnitDIEbyUnit,getVersion,replaceValue] noreturn:[addValue,getAttribute,replaceValue]
writeEmptyListDwarf5 call:[StringRef,encodeULEB128,write] noreturn:[write]
writeLegacyLocList call:[StringRef,data,empty,encodeULEB128,getForm,getIndexFromAddress,replaceLocValbyForm,size,write] noreturn:[StringRef,replaceLocValbyForm]
writeDWARF5LocList call:[StringRef,data,emitWithBase < DebugLocationsVector , dwarf :: LoclistEntries , DebugLocationEntry >,empty,encodeULEB128,getIndexFromAddress,push_back,replaceLocValbyForm,size,write,writeEmptyListDwarf5,writeExpression] noreturn:[StringRef,write]
encodeLE call:[LE64]
emitDwarfSetLineAddrAbs call:[Emit,emitIntValue,emitULEB128IntValue] noreturn:[Emit]
emitBinaryDwarfLineTable call:[Emit,emitDwarfSetLineAddrAbs,emitEndOfSequence,emitInt8,emitULEB128IntValue,empty,getAsmInfo,getCodePointerSize,getContext,getDwarfVersion,getULEB128Size] noreturn:[Emit,emitDwarfSetLineAddrAbs,emitEndOfSequence,emitInt8,emitULEB128IntValue]
emitDwarfLineTable call:[assert,emitDwarfAdvanceLineAddr,emitInt8,emitULEB128IntValue,getAsmInfo,getCodePointerSize,getColumn,getContext,getDiscriminator,getDwarfVersion,getFileNum,getFlags,getIsa,getLabel,getLine,getULEB128Size] noreturn:[assert,emitInt8,emitULEB128IntValue]
parseAndPopulateDebugLineStr call:[StrData,addString,assert,errs,getCStr,getContents,isLittleEndian,isValidOffset,success]
emitWithBase < DebugAddressRangesVector , dwarf :: RnglistEntries , DebugAddressRange > call:[Func,encodeULEB128,getIndexFromAddress,push_back,size,write] noreturn:[Func]
emitWithBase < DebugLocationsVector , dwarf :: LoclistEntries , DebugLocationEntry > call:[Func,encodeULEB128,getIndexFromAddress,push_back,size,write] noreturn:[Func]
