getSystemFlag call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
setSystemFlag call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createPushRegisters call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createPopRegisters call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
loadReg call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
storeReg call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
atomicAdd call:[addOperand,clear,createReg,setOpcode] noreturn:[addOperand]
createMovz call:[addOperand,assert,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createIncMemory call:[atomicAdd,back,createMovz,emplace_back]
equals call:[equals,getKind,getSubExpr] noreturn:[equals]
shortenInstruction
isADRP call:[getOpcode]
isADR call:[getOpcode]
isAddXri call:[getOpcode]
getADRReg call:[assert,getNumPrimeOperands,getOperand,getReg,isADR,isADRP,isReg] noreturn:[getReg]
isTB call:[getOpcode,return] noreturn:[return]
isCB call:[getOpcode,return] noreturn:[return]
isMOVW call:[getOpcode,return] noreturn:[return]
isADD call:[getOpcode,return] noreturn:[return]
isLDRB call:[getOpcode,return] noreturn:[return]
isLDRH call:[getOpcode,return] noreturn:[return]
isLDRW call:[getOpcode,return] noreturn:[return]
isLDRX call:[getOpcode,return] noreturn:[return]
mayLoad call:[isLDRB,isLDRH,isLDRW,isLDRX] noreturn:[isLDRX]
isAArch64ExclusiveLoad call:[getOpcode,return] noreturn:[return]
isAArch64ExclusiveStore call:[getOpcode,return] noreturn:[return]
isAArch64ExclusiveClear call:[getOpcode,return] noreturn:[return]
isLoadFromStack call:[getReg,isReg,mayLoad,useOperands]
isRegToRegMove call:[getImm,getOpcode,getOperand,getReg]
isIndirectCall call:[getOpcode]
getSpRegister call:[llvm_unreachable] noreturn:[llvm_unreachable]
getIntArgRegister call:[getNoRegister] noreturn:[getNoRegister]
hasPCRelOperand call:[get,getNumOperands,getOpcode,isADR,isADRP,operands]
evaluateADR call:[assert,getExpr,getImm,getOpcode,getOperand,isADR,isADRP,isExpr,isImm]
evaluateAArch64MemoryOperand call:[assert,evaluateADR,get,getExpr,getImm,getNumOperands,getOpcode,getOperand,isADR,isADRP,isExpr,isImm,operands] noreturn:[evaluateADR]
evaluateMemOperandTarget call:[evaluateAArch64MemoryOperand,getOpcode]
getMemOperandDisp call:[assert,begin,end,get,getNumOperands,getNumPrimeOperands,getOpcode,isADR,isADRP,operands]
replaceMemOperandDisp call:[getMemOperandDisp]
getCalleeSavedRegs call:[getAliases] noreturn:[getAliases]
getTargetExprFor call:[create,isADR,isADRP] noreturn:[create]
getSymbolRefOperandNum call:[getNumPrimeOperands,isADR,isADRP,isAddXri,isConditionalBranch,isMOVW,isTB]
getTargetSymbol call:[getKind,getLHS,getSubExpr,getSymbol,getTargetSymbol] noreturn:[getSymbol,getTargetSymbol]
getTargetSymbol call:[getExpr,getOperand,getSymbolRefOperandNum,getTargetSymbol,isExpr] noreturn:[getTargetSymbol]
getTargetAddend call:[getOpcode,getRHS,getSubExpr,getTargetAddend,getValue] noreturn:[getTargetAddend,getValue]
getTargetAddend call:[getExpr,getOperand,getSymbolRefOperandNum,getTargetAddend,isExpr] noreturn:[getTargetAddend]
replaceBranchTarget call:[assert,begin,create,createExpr,getNumPrimeOperands,isBranch,isCall,isConditionalBranch,isIndirectBranch,isTB] noreturn:[createExpr]
analyzeIndirectBranchFragment call:[assert,errs,getArithExtendType,getArithShiftValue,getExpr,getImm,getOpcode,getOperand,isADD,isExpr,isImm,isLDRB,isLDRH,isLoadFromStack,isRegToRegMove,llvm_unreachable,mayLoad,size] noreturn:[getExpr,getImm,llvm_unreachable]
computeLocalUDChain call:[BitVector,LLVM_DEBUG,addInstrOperands,clear,dbgs,dump,getNumRegs,getReg,getWrittenRegs,isNoop,isPseudo,isReg,isTerminator,primeOperands,push_back,set_bits] noreturn:[LLVM_DEBUG,addInstrOperands,clear,dump,isTerminator]
analyzeIndirectBranch call:[analyzeIndirectBranchFragment,computeLocalUDChain]
analyzePLTEntry call:[assert,computeLocalUDChain,evaluateMemOperandTarget,getImm,getOpcode,getOperand,isImm,size]
getInvertedBranchOpcode call:[llvm_unreachable]
getCondCode call:[getOpcode] noreturn:[getOpcode]
getCanonicalBranchCondCode
reverseBranchCondition call:[LLVM_DEBUG,assert,dump,getImm,getInvertedBranchOpcode,getInvertedCondCode,getOpcode,getOperand,isCB,isTB,llvm_unreachable,replaceBranchTarget,setImm,setOpcode] noreturn:[assert,llvm_unreachable,replaceBranchTarget]
getPCRelEncodingSize call:[getOpcode,llvm_unreachable]
getShortJmpEncodingSize
getUncondBranchEncodingSize
createCmpJE call:[MCInstBuilder,addExpr,addImm,addReg,create,emplace_back]
createTailCall call:[createDirectCall] noreturn:[createDirectCall]
createLongTailCall call:[createShortJmp] noreturn:[createShortJmp]
createTrap call:[addOperand,clear,createImm,setOpcode] noreturn:[addOperand]
convertJmpToTailCall call:[setTailCall]
convertTailCallToJmp call:[clearOffset,getConditionalTailCall,removeAnnotation,unsetConditionalTailCall] noreturn:[unsetConditionalTailCall]
createIndirectPltCall call:[addOperand,assert,createImm,createReg,emplace_back,getOpcode,isTailCall,setOpcode,setOperandToSymbolRef,setTailCall] noreturn:[setTailCall]
lowerTailCall call:[getConditionalTailCall,removeAnnotation,unsetConditionalTailCall] noreturn:[unsetConditionalTailCall]
isNoop call:[getImm,getOpcode,getOperand]
createNoop call:[addOperand,clear,createImm,setOpcode] noreturn:[addOperand]
mayStore
createDirectCall call:[addOperand,clear,convertJmpToTailCall,create,createExpr,getTargetExprFor,setOpcode] noreturn:[convertJmpToTailCall]
analyzeBranch call:[assert,getTargetSymbol,isBranch,isIndirectBranch,isNoop,isPseudo,isTailCall,isTerminator,isUnconditionalBranch,llvm_unreachable] noreturn:[llvm_unreachable]
createLongJmp call:[addOperand,clear,create,createExpr,createImm,createReg,emplace_back,setOpcode,setTailCall] noreturn:[emplace_back,setTailCall]
createShortJmp call:[addOperand,back,clear,createReg,emplace_back,materializeAddress,setOpcode,setTailCall,swap] noreturn:[setTailCall,swap]
matchLinkerVeneer call:[getImm,getNumPrimeOperands,getOpcode,getOperand,getReg,isImm,isReg]
matchAdrpAddPair call:[assert,getOperand,getReg,isADRP,isAddXri,isReg]
replaceImmWithSymbolRef call:[getImm,getNumPrimeOperands,getOperand,isImm,setOperandToSymbolRef]
createUncondBranch call:[addOperand,clear,create,createExpr,getTargetExprFor,setOpcode] noreturn:[addOperand]
shouldRecordCodeRelocation call:[llvm_unreachable] noreturn:[llvm_unreachable]
getTrapFillValue call:[StringRef] noreturn:[StringRef]
createReturn call:[addOperand,clear,createReg,setOpcode] noreturn:[addOperand]
createStackPointerIncrement call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createStackPointerDecrement call:[addOperand,clear,createImm,createReg,setOpcode] noreturn:[addOperand]
createIndirectBranch call:[addOperand,clear,createReg,setOpcode] noreturn:[addOperand]
createInstrumentedIndCallHandlerExitBB call:[Insts,createIndirectBranch,createPopRegisters,loadReg,setSystemFlag]
createInstrumentedIndTailCallHandlerExitBB call:[createInstrumentedIndCallHandlerExitBB] noreturn:[createInstrumentedIndCallHandlerExitBB]
createGetter call:[Insts,assert,begin,copy,createReturn,end,getOrCreateSymbol,loadReg,materializeAddress,size]
createNumCountersGetter call:[createGetter] noreturn:[createGetter]
createInstrLocationsGetter call:[createGetter] noreturn:[createGetter]
createInstrTablesGetter call:[createGetter] noreturn:[createGetter]
createInstrNumFuncsGetter call:[createGetter] noreturn:[createGetter]
convertIndirectCallToLoad call:[begin,createImm,createReg,getOpcode,insert,isTailCall,llvm_unreachable,removeAnnotation,setOpcode] noreturn:[llvm_unreachable,removeAnnotation]
createLoadImmediate call:[Insts,addOperand,createImm,createReg,setOpcode] noreturn:[addOperand]
createIndirectCallInst call:[addOperand,clear,createReg,setOpcode] noreturn:[addOperand]
createInstrumentedIndirectCall call:[assert,back,begin,convertIndirectCallToLoad,copy,createIndirectCallInst,createLoadImmediate,createPushRegisters,emplace_back,end,getIntArgRegister,insert,isTailCall,materializeAddress,move,moveAnnotations,resize,size,stripAnnotations]
createInstrumentedIndCallHandlerEntryBB call:[addOperand,assert,back,begin,copy,createCmpJE,createDirectCall,createPushRegisters,createReg,emplace_back,end,getIntArgRegister,getSystemFlag,insert,loadReg,materializeAddress,setOpcode,size,storeReg]
createInstrIncMemory call:[Instrs,assert,begin,copy,createIncMemory,createPopRegisters,createPushRegisters,createStackPointerDecrement,createStackPointerIncrement,end,getSystemFlag,loadReg,materializeAddress,setSystemFlag,size,storeReg] noreturn:[createStackPointerDecrement,createStackPointerIncrement]
createSymbolTrampoline call:[createShortJmp]
materializeAddress call:[Insts,addOperand,clear,createImm,createReg,setOpcode,setOperandToSymbolRef]
createRelocation call:[MCFixupKind,Relocation,assert,extractFixupExpr,getFixupKindInfo,getKind,getOffset] noreturn:[Relocation]
getMinFunctionAlignment
createAArch64MCPlusBuilder call:[AArch64MCPlusBuilder] noreturn:[AArch64MCPlusBuilder]
