updateEdgeWeight < BinaryBasicBlock * > call:[make_pair]
updateEdgeWeight < Inverse < BinaryBasicBlock * > > call:[make_pair]
computeEdgeWeights call:[child_begin,child_end,getExecutionCount,push_back] noreturn:[getExecutionCount]
recalculateBBCounts call:[branch_info,getBranchInfo,getExecutionCount,predecessors,setExecutionCount] noreturn:[setExecutionCount]
guessEdgeByRelHotness call:[branch_info_begin,getBranchInfo,getExecutionCount,make_pair,predecessors,successors]
guessPredEdgeCounts call:[count,getBranchInfo,getExecutionCount,insert,llvm_unreachable,make_pair,pred_size,predecessors] noreturn:[llvm_unreachable]
guessSuccEdgeCounts call:[branch_info_begin,count,getExecutionCount,insert,llvm_unreachable,make_pair,succ_size,successors] noreturn:[llvm_unreachable]
guessEdgeByIterativeApproach call:[branch_info_begin,count,getBranchInfo,getExecutionCount,guessPredEdgeCounts,guessSuccEdgeCounts,insert,make_pair,min,predecessors,successors,while] noreturn:[insert]
createLoopNestLevelMap call:[getLoopInfo]
equalizeBBCounts call:[back,begin,calculateLoopInfo,clear,count,createLoopNestLevelMap,doForAllDominators,doesADominateB,emplace_back,end,getDominatorAnalysis,getExecutionCount,getInsnToBBMap,getPostDominatorAnalysis,insert,max,push_back,setExecutionCount,size] noreturn:[clear,doForAllDominators,max,push_back,setExecutionCount]
