isWhitespace call:[begin,end,isWhitespace]
isEnd call:[size] noreturn:[size]
setupBuffer call:[assert,begin,end,getLocation,getText,isEnd] noreturn:[getLocation]
getSourceLocation call:[getLocWithOffset] noreturn:[getLocWithOffset]
peek call:[assert,isEnd]
consumeChar call:[addToken,assert,isEnd,setupBuffer] noreturn:[setupBuffer]
lexTemplate call:[consumeChar,isEnd,peek,push_back]
addToken call:[consumeToken,is,isNot,push_back,putBack,setupBuffer,size] noreturn:[setupBuffer]
consumeWhitespace call:[consumeChar,isEnd,isWhitespace,peek] noreturn:[consumeChar]
formTokenWithChars call:[setKind,setLength,setLocation,setText] noreturn:[setText]
TextTokenRetokenizer call:[addToken] noreturn:[addToken]
lexType call:[StringRef,c_str,consumeChar,consumeWhitespace,formTokenWithChars,getSourceLocation,isEnd,isWhitespace,lexTemplate,memcpy,peek,push_back,size] noreturn:[consumeChar]
startsWithParCommand call:[LineStart,isWhitespace,starts_with] noreturn:[starts_with]
lexParHeading call:[StringRef,c_str,consumeChar,consumeWhitespace,formTokenWithChars,getSourceLocation,isEnd,memcpy,peek,push_back,size,startsWithParCommand] noreturn:[consumeChar]
lexWord call:[StringRef,c_str,consumeChar,consumeWhitespace,formTokenWithChars,getSourceLocation,isEnd,isWhitespace,memcpy,peek,push_back,size] noreturn:[consumeChar]
lexDelimitedSeq call:[StringRef,c_str,consumeChar,consumeWhitespace,formTokenWithChars,getSourceLocation,isEnd,memcpy,peek,push_back,size] noreturn:[consumeChar]
putBackLeftoverTokens call:[ArrayRef,StringRef,begin,end,formTokenWithChars,getSourceLocation,isEnd,putBack,size] noreturn:[putBack]
